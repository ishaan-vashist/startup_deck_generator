import os
import time
import json
import traceback
from dotenv import load_dotenv
from crew import build_crew
from litellm import RateLimitError  # For handling Groq's rate limits

# Load environment variables from .env (like GROQ_API_KEY)
load_dotenv()

# Constants
OUTPUT_PATH = "deck_output.md"
MAX_RETRIES = 3  # Number of retry attempts in case of rate limiting

# Main function to handle pitch deck generation
def run_deck_generation(startup_idea: str):
    print("\nBuilding your Startup Deck...\n")

    try:
        # Initialize Crew with idea
        crew = build_crew(startup_idea)
        print("Crew initialized. Starting execution...\n")

        result = None
        retry_count = 0

        # Retry loop for handling rate limits
        while retry_count < MAX_RETRIES:
            try:
                result = crew.kickoff()  # Start task execution
                break  # Exit loop if successful

            except RateLimitError as e:
                retry_count += 1
                try:
                    # Parse exact wait time from Groq's response
                    error_data = json.loads(str(e).split("GroqException - ")[-1])
                    wait_time = float(
                        error_data["error"]["message"]
                        .split("try again in ")[-1]
                        .split("s")[0]
                    )
                except Exception:
                    wait_time = 10 + retry_count * 5  # Use fallback wait time

                print(
                    f"Groq rate limit hit (attempt {retry_count}/{MAX_RETRIES}). "
                    f"Retrying in {round(wait_time, 1)} seconds..."
                )
                time.sleep(wait_time)

            except Exception as e:
                print("\nUnexpected error during task execution:")
                traceback.print_exc()
                raise e  # Let the main block handle it again for any cleanups

        # If no result was generated, raise error
        if not result:
            raise ValueError("No output generated by the agents.")

        print("\nDeck generated successfully.\n")

        # Save result to markdown file
        with open(OUTPUT_PATH, "w", encoding="utf-8") as f:
            f.write("# Startup Deck\n\n")
            f.write(str(result))  # Convert CrewOutput to string if needed

        print(f"Deck saved to {OUTPUT_PATH}. Ready for PDF export.\n")

    except Exception as e:
        print("\nError during deck generation:")
        traceback.print_exc()  # Print full traceback to help diagnose issue

# Run the script directly if executed via terminal
if __name__ == "__main__":
    print("Startup Deck Generator")
    idea = input("Enter your startup idea: ")
    run_deck_generation(idea)
